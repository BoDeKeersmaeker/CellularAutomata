// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWStructuredBuffer<int> Map;
RWStructuredBuffer<int> TempMap;

int Width;
int Height;
int Depth;
int SmoothingFactor;
int IterationAmount;
int RandomFillPercent;

float Rand(float2 co)
{
    return frac(sin(dot(co, float2(12.9898, 78.233))) * 43758.5453);
}

int RandBinary(float2 co)
{
    return Rand(co) % 2;
}

bool IsInMapRange(int x, int y, int z)
{
    return (x >= 0 && x < Width && y >= 0 && y < Height && z >= 0 && z < Depth);
}

int GetSurroundingWallCount(int gridX, int gridY, int gridZ)
{
    int wallCount = 0;

    for (int neighbourX = gridX - 1; neighbourX <= gridX + 1; neighbourX++)
        for (int neighbourY = gridY - 1; neighbourY <= gridY + 1; neighbourY++)
            for (int neighbourZ = gridZ - 1; neighbourZ < gridZ + 1; neighbourZ++)
            {
                if (neighbourX == gridX && neighbourY == gridY && neighbourZ == gridZ)
                    continue;

                if (!IsInMapRange(neighbourX, neighbourY, neighbourZ))
                    wallCount++;
                else if (Map[neighbourX + Width * (neighbourY + Height * neighbourZ)] == 1)
                    wallCount += Map[neighbourX + Width * (neighbourY + Height * neighbourZ)];
            }

    return wallCount;
}

void SmoothMap()
{
    TempMap = Map;
    
    for (int x = 0; x < Width; x++)
        for (int y = 0; y < Height; y++)
            for (int z = 0; z < Depth; z++)
            {
                int neighbourWallTiles = GetSurroundingWallCount(x, y, z);

                if (neighbourWallTiles > SmoothingFactor)
                    TempMap[x + Width * (y + Height * z)] = 1;
                else if (neighbourWallTiles < SmoothingFactor)
                    TempMap[x + Width * (y + Height * z)] = 0;
                else
                    TempMap[x + Width * (y + Height * z)] = Map[x + Width * (y + Height * z)];
            }

    Map = TempMap;
}

[numthreads(10,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    
    //for (int x = 0; x < Width; x++)
    //    for (int y = 0; y < Height; y++)
    //        for (int z = 0; z < Depth; z++)
    //        {
    //            if (x <= 0 || x >= Width - 1 || y <= 0 || y >= Height - 1 || z <= 0 || z >= Depth - 1)
    //                Map[x + Width * (y + Depth * z)] = 1;
    //            else
    //            {
                
    //                if (Rand(/*float2(*/id.xy/*)*/) * 100 < RandomFillPercent)
    //                    Map[x + Width * (y + Depth * z)] = 1;
    //                else
    //                    Map[x + Width * (y + Depth * z)] = 0;
    //            }
    //        }
    
    //for (int i = 0; i < IterationAmount; i++)
        SmoothMap();
}
